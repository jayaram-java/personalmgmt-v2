package com.company.Personalmgmt.serviceimpl;

import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpSession;

import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.company.Personalmgmt.dto.UserDto;
import com.company.Personalmgmt.model.Role;
import com.company.Personalmgmt.model.User;
import com.company.Personalmgmt.repository.RoleRepository;
import com.company.Personalmgmt.repository.UserRepository;
import com.company.Personalmgmt.service.UserService;

@Service
public class UserServiceImpl implements UserService {
	
	@Autowired
	UserRepository userRepository;
	
	@Autowired
	RoleRepository roleRepository;
	
	@Autowired
	HttpSession httpsession;
	
	private static final org.slf4j.Logger log = LoggerFactory.getLogger(UserServiceImpl.class);
	

	public boolean saveuserdetails(UserDto userDto) {
		
		log.info("API name = saveuserdetails");

		try {

			if (userDto.getId() == null) {
				
				Role role = roleRepository.findByRolename(userDto.getRoleName());
				
				log.info("Save operation");
				
				log.info("Username = "+userDto.getUsername()+" password = "+userDto.getPassword());
				
				//It returns an integer or a 4 bytes value which is generated by the hashing algorithm

				int hashCode = userDto.getPassword().hashCode();
				
				log.info("hashCode = "+hashCode);

				User user = new User();

				user.setUsername(userDto.getUsername());
				user.setPassword(String.valueOf(hashCode));
				user.setEmployeename(userDto.getEmployeename());
				user.setPhone(userDto.getPhone());
				user.setRole(role);

				userRepository.save(user);

			} else {

				Optional<User> user = userRepository.findById((long) userDto.getId());

				user.get().setUsername(userDto.getUsername());
				user.get().setEmployeename(userDto.getEmployeename());
				user.get().setPhone(userDto.getPhone());

				userRepository.save(user.get());
			}

		} catch (Exception e) {
			log.info("Exception " + e);
		}

		return true;
	}

	public List<UserDto> getalluserdetails() {
		
		log.info("API name = getalluserdetails");

		List<UserDto> userDtos = new ArrayList<UserDto>();

		try {

			List<User> users = userRepository.findAll();

			int n = 1;

			for (User user : users) {

				UserDto userDto = new UserDto();

				BeanUtils.copyProperties(user, userDto);

				userDto.setSerialId(n);

				userDtos.add(userDto);

				n++;
			}
		} catch (Exception e) {
			log.info("Exception " + e);
		}

		return userDtos;
	}

	public UserDto getEmployeeDetailsFromid(Long id) {

		UserDto userDto = new UserDto();

		try {

			Optional<User> user = userRepository.findById((long) id);
			
			userDto.setUsername(user.get().getUsername());
			
			userDto.setEmployeename(user.get().getEmployeename());
			
			userDto.setPhone(user.get().getPhone());

		//	BeanUtils.copyProperties(user, userDto);

		} catch (Exception e) {
			log.info("Exception " + e);
		}

		return userDto;
	}

	public boolean deleteEmployeeDetailsFromid(Long id) {

		try {

			Optional<User> user = userRepository.findById((long) id);

			if (user != null) {
				userRepository.deleteById(id);
				return true;
			}

		} catch (Exception e) {
			log.info("Exception " + e);
		}

		return false;
	}

	public boolean checkUsername(String name) {

		try {

			User user = userRepository.findByUsername(name);
			if (user != null) {
				return false;
			}

		} catch (Exception e) {
			log.info("Exception " + e);
		}

		return true;
	}
	
	public UserDto getspecifieduserdetail(String name) {

		UserDto userDto = new UserDto();

		try {

			User user = userRepository.findByUsername(name);

			BeanUtils.copyProperties(user, userDto);

		} catch (Exception e) {
			log.info("Exception " + e);
		}

		return userDto;
	}

	@Override
	public List<UserDto> currentUserDetails() {

		List<UserDto> ob = new ArrayList<UserDto>();
		
		LocalDateTime startTime = LocalDateTime.now();

		try {

			SimpleDateFormat format = new SimpleDateFormat("dd-MMMM-yyyy");

			String username = (String) httpsession.getAttribute("uName");
			UserDto userDto = new UserDto();
			User user = userRepository.findByUsername(username);
			BeanUtils.copyProperties(user, userDto);

			userDto.setCreatedDate(format.format(user.getCreatedDate()));

			if (user.getModifiedDate() != null) {

				userDto.setModifiedDate(format.format(user.getModifiedDate()));

			}

			ob.add(userDto);

		} catch (Exception e) {
			log.info("Exception " + e);
		}finally {
			LocalDateTime endTime = LocalDateTime.now();
			Duration latency = Duration.between(startTime, endTime);
			log.info("API | *currentUserDetails | latency = " + latency);

		}

		return ob;
	}

}
